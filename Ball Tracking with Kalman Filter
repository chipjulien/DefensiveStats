import numpy as np

class KalmanFilter:
    def __init__(self):
        # Define initial parameters
        self.dt = 0.033  # Time step (30 FPS)
        self.A = np.array([[1, 0, self.dt, 0],  # State transition matrix
                           [0, 1, 0, self.dt],
                           [0, 0, 1, 0],
                           [0, 0, 0, 1]])
        self.H = np.array([[1, 0, 0, 0],  # Measurement function
                           [0, 1, 0, 0]])
        self.Q = np.eye(4) * 0.01  # Process noise
        self.R = np.eye(2) * 1.0   # Measurement noise
        self.P = np.eye(4) * 1.0   # Estimate covariance
        self.x = np.zeros((4, 1))  # Initial state

    def predict(self):
        # Predict state
        self.x = np.dot(self.A, self.x)
        self.P = np.dot(np.dot(self.A, self.P), self.A.T) + self.Q
        return self.x[:2].flatten()

    def update(self, z):
        # Update state with measurement
        z = np.array(z).reshape(2, 1)
        y = z - np.dot(self.H, self.x)
        S = np.dot(np.dot(self.H, self.P), self.H.T) + self.R
        K = np.dot(np.dot(self.P, self.H.T), np.linalg.inv(S))
        self.x = self.x + np.dot(K, y)
        self.P = self.P - np.dot(np.dot(K, self.H), self.P)
        return self.x[:2].flatten()
